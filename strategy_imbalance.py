from os.path import abspath
from datetime import datetime
from backtrader import Cerebro, Strategy, sizers, analyzers, OrderBase
from backtrader.feeds import GenericCSVData

class ImbalanceStrategy(Strategy):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –º–µ–¥–≤–µ–∂—å–µ–º –∏–º–±–∞–ª–∞–Ω—Å–µ"""
    params = {
        "imbalance": 0.7,
        "profit": 0.7,
        "stop_loss": 2.0,
        "take_profit": 1.5,
        "debug": True  # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    }

    def __init__(self):
        self.time = self.data.datetime
        self.open = self.data.open
        self.close = self.data.close
        self.high = self.data.high
        self.low = self.data.low
        self.volume = self.data.volume

        self.order = None
        self.entry_price = None
        self.win_trades = []
        self.lose_trades = []
        self.checks_counter = 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.condition_stats = {
            'condition_0': 0,
            'condition_1': 0,
            'condition_2': 0,
            'all_conditions': 0
        }

    def find_bear_imbalance(self):
        """–ü–æ–∏—Å–∫ –º–µ–¥–≤–µ–∂—å–µ–≥–æ –∏–º–±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 —Å–≤–µ—á–∞—Ö"""
        if len(self) < 4:
            return False

        self.checks_counter += 1

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        third_imb_kline = self.low[-3]
        second_imb_kline = self.low[-2]
        first_imb_kline = self.high[-1]
        current_kline = self.close[0]

        # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ª–æ–≤–∏—è
        condition_0 = second_imb_kline < third_imb_kline
        condition_1 = (first_imb_kline - current_kline) / first_imb_kline > self.params.profit / 100
        condition_2 = (third_imb_kline - first_imb_kline) / third_imb_kline > self.params.imbalance / 100

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ª–æ–≤–∏–π
        if condition_0:
            self.condition_stats['condition_0'] += 1
        if condition_1:
            self.condition_stats['condition_1'] += 1
        if condition_2:
            self.condition_stats['condition_2'] += 1

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 100 —Å–≤–µ—á–µ–π
        if self.params.debug and self.checks_counter % 100 == 0:
            imbalance_gap = ((third_imb_kline - first_imb_kline) / third_imb_kline * 100) if third_imb_kline > 0 else 0
            profit_gap = ((first_imb_kline - current_kline) / first_imb_kline * 100) if first_imb_kline > 0 else 0

            print(f"\nüìä Check #{self.checks_counter} | Date: {self.time.datetime(0)}")
            print(f"   Third Low[-3]: {third_imb_kline:.2f}")
            print(f"   Second Low[-2]: {second_imb_kline:.2f}")
            print(f"   First High[-1]: {first_imb_kline:.2f}")
            print(f"   Current Close[0]: {current_kline:.2f}")
            print(f"   Condition 0 (second < third): {condition_0} | {second_imb_kline:.2f} < {third_imb_kline:.2f}")
            print(f"   Condition 1 (profit > {self.params.profit}%): {condition_1} | Gap: {profit_gap:.2f}%")
            print(f"   Condition 2 (imbalance > {self.params.imbalance}%): {condition_2} | Gap: {imbalance_gap:.2f}%")

        if all([condition_0, condition_1, condition_2]):
            self.condition_stats['all_conditions'] += 1
            imbalance_gap = ((third_imb_kline - first_imb_kline) / third_imb_kline * 100)
            profit_gap = ((first_imb_kline - current_kline) / first_imb_kline * 100)

            print(f"\n‚úÖ‚úÖ‚úÖ Bear Imbalance found! Date: {self.time.datetime(0)}")
            print(f"   Third Low[-3]: {third_imb_kline:.2f}")
            print(f"   Second Low[-2]: {second_imb_kline:.2f}")
            print(f"   First High[-1]: {first_imb_kline:.2f}")
            print(f"   Current Close[0]: {current_kline:.2f}")
            print(f"   Imbalance Gap: {imbalance_gap:.2f}%")
            print(f"   Profit Gap: {profit_gap:.2f}%")
            return True

        return False

    def notify_order(self, order: OrderBase):
        if order.status in [order.Submitted, order.Accepted]:
            return

        if order.status in [order.Completed]:
            if order.issell():
                self.entry_price = order.executed.price
                print(f"\nüî¥ SHORT opened at {order.executed.price:.2f}")
                print(f"   Commission: {order.executed.comm:.2f}")
                print(f"   Stop Loss: {self.entry_price * (1 + self.params.stop_loss / 100):.2f}")
                print(f"   Take Profit: {self.entry_price * (1 - self.params.take_profit / 100):.2f}")
            elif order.isbuy():
                print(f"üü¢ SHORT closed at {order.executed.price:.2f}")
                print(f"   Commission: {order.executed.comm:.2f}")

        elif order.status in [order.Cancelled, order.Margin, order.Rejected]:
            print(f"‚ö†Ô∏è Order cancelled/rejected: {order.status}")

        self.order = None

    def notify_trade(self, trade):
        if trade.isclosed:
            pnl_percent = (trade.pnlcomm / self.entry_price) * 100 if self.entry_price else 0

            if trade.pnlcomm > 0:
                self.win_trades.append(trade.pnlcomm)
                print(f"üí∞ Profit: {trade.pnlcomm:.2f} ({pnl_percent:.2f}%)")
            else:
                self.lose_trades.append(trade.pnlcomm)
                print(f"üìâ Loss: {trade.pnlcomm:.2f} ({pnl_percent:.2f}%)")
            print()

    def next(self):
        if self.order:
            return

        if not self.position:
            if self.find_bear_imbalance():
                print(f"üìä Opening SHORT position")
                self.order = self.sell()
        else:
            current_price = self.close[0]

            if current_price >= self.entry_price * (1 + self.params.stop_loss / 100):
                print(f"üõë Stop Loss triggered at {current_price:.2f}")
                self.order = self.buy()
            elif current_price <= self.entry_price * (1 - self.params.take_profit / 100):
                print(f"üéØ Take Profit triggered at {current_price:.2f}")
                self.order = self.buy()

    def stop(self):
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê")
        print("=" * 60)
        print(f"–ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.broker.getvalue():.2f}")
        print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(self.win_trades)}")
        print(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(self.lose_trades)}")
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ —É—Å–ª–æ–≤–∏–π
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–°–õ–û–í–ò–ô:")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {self.checks_counter}")
        print(
            f"Condition 0 (second < third) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.condition_stats['condition_0']} —Ä–∞–∑ ({self.condition_stats['condition_0'] / self.checks_counter * 100:.2f}%)")
        print(
            f"Condition 1 (profit > {self.params.profit}%) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.condition_stats['condition_1']} —Ä–∞–∑ ({self.condition_stats['condition_1'] / self.checks_counter * 100:.2f}%)")
        print(
            f"Condition 2 (imbalance > {self.params.imbalance}%) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.condition_stats['condition_2']} —Ä–∞–∑ ({self.condition_stats['condition_2'] / self.checks_counter * 100:.2f}%)")
        print(
            f"–í—Å–µ —É—Å–ª–æ–≤–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {self.condition_stats['all_conditions']} —Ä–∞–∑ ({self.condition_stats['all_conditions'] / self.checks_counter * 100:.2f}%)")

        all_trade_len = len(self.win_trades) + len(self.lose_trades)

        if all_trade_len > 0:
            win_rate = (len(self.win_trades) / all_trade_len) * 100
            total_profit = sum(self.win_trades)
            total_loss = sum(self.lose_trades)
            net_profit = total_profit + total_loss

            print(f"\nüíº –¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {all_trade_len}")
            print(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.2f}%")

            if self.win_trades:
                max_win = max(self.win_trades)
            try:
                avg_win = total_profit / len(self.win_trades)
            except:
                avg_win = 0
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${max_win:.2f}")
            print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_win:.2f}")

            if self.lose_trades:
                max_lose = min(self.lose_trades)
                try:
                    avg_lose = total_loss / len(self.lose_trades)
                except ZeroDivisionError:
                    avg_lose = 0
            else:
                max_lose = 0
                avg_lose = 0

            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${max_lose:.2f}")
            print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${avg_lose:.2f}")

            print(f"\nüí∞ –§–ò–ù–ê–ù–°–û–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:")
            print(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:.2f}")

            print(f"–û–±—â–∏–π —É–±—ã—Ç–æ–∫: ${total_loss:.2f}")
            print(f"–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${net_profit:.2f}")

            if self.win_trades and self.lose_trades:
                profit_factor = abs(total_profit / total_loss)
                print(f"Profit Factor: {profit_factor:.2f}")
        else:
            print("\n‚ö†Ô∏è –°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ")
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –£–º–µ–Ω—å—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã imbalance –∏ profit")
            print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª–µ")
            print("   3. –ò–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥")

            print("=" * 60)

class MyCSVData(GenericCSVData):
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞"""
    params = {
        "dtformat": "%Y-%m-%d %H:%M:%S",
        "datetime": 0,
        "open": 1,
        "high": 2,
        "low": 3,
        "close": 4,
        "volume": 5,
        "openinterest": -1,
    }

if __name__ == "__main__":
    # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
    csv_file_path = abspath("./data/BTCUSDT_15.csv")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = MyCSVData(
        dataname=csv_file_path,
        fromdate=datetime(2022, 1, 1),
        todate=datetime(2025, 10, 1),
        reverse=False
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Cerebro
    cerebro = Cerebro()
    cerebro.adddata(data)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –¥–ª—è
    cerebro.addstrategy(ImbalanceStrategy,
                        imbalance=0.5,  # –£–º–µ–Ω—å—à–µ–Ω —Å 0.7 –¥–æ 0.5
                        profit=0.5,  # –£–º–µ–Ω—å—à–µ–Ω —Å 0.7 –¥–æ 0.5
                        stop_loss=2.0,
                        take_profit=1.5,
                        debug=True)  # –í–∫–ª—é—á–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞

    cerebro.broker.setcash(10000)  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    cerebro.addsizer(sizers.FixedSize, stake=0.1)  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    cerebro.broker.setcommission(commission=0.0018)  # –ö–æ–º–∏—Å—Å–∏—è

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    cerebro.addanalyzer(analyzers.SharpeRatio, _name='sharpe')
    cerebro.addanalyzer(analyzers.DrawDown, _name='drawdown')
    cerebro.addanalyzer(analyzers.TradeAnalyzer, _name='trades')

    print(f"\nüöÄ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${cerebro.broker.getvalue():.2f}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: 2022-01-24 –¥–æ 2025-08-02")
    print(f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   - Imbalance: 0.5%")
    print(f"   - Profit: 0.5%")
    print(f"   - Stop Loss: 2.0%")
    print(f"   - Take Profit: 1.5%")

    # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
    results = cerebro.run()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    strat = results[0]

    print("\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:")

    if hasattr(strat.analyzers, 'sharpe'):
        sharpe = strat.analyzers.sharpe.get_analysis().get('sharperatio', None)
        print(f"Sharpe Ratio: {sharpe if sharpe else 'N/A'}")

    if hasattr(strat.analyzers, 'drawdown'):
        dd = strat.analyzers.drawdown.get_analysis()
        max_dd = dd.get('max', {}).get('drawdown', 0)
        print(f"Max Drawdown: {max_dd:.2f}%")

    if hasattr(strat.analyzers, 'trades'):
        trades = strat.analyzers.trades.get_analysis()
        print(f"Total Trades: {trades.get('total', {}).get('total', 0)}")
        print(f"Won Trades: {trades.get('won', {}).get('total', 0)}")
        print(f"Lost Trades: {trades.get('lost', {}).get('total', 0)}")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    try:
        cerebro.plot(style="candle")
    except Exception as e:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

        # cerebro.addstrategy(ImbalanceStrategy,
        #                     imbalance=0.3,  # –ï—â–µ –º–µ–Ω—å—à–µ
        #                     profit=0.3,  # –ï—â–µ –º–µ–Ω—å—à–µ
        #                     stop_loss=3.0,
        #                     take_profit=2.0,
        #                     debug=True)